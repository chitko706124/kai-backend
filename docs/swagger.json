{
    "schemes": [
        "http",
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "This is a comprehensive REST API for Indonesian Railway (KAI) ticket booking system.\nThe API provides endpoints for user authentication, station management, train management, schedule search, and booking operations.",
        "title": "KAI Backend",
        "contact": {
            "name": "Louis Fernando",
            "email": "fernandolouis55@gmail.com"
        },
        "license": {
            "name": "MIT",
            "url": "http://opensource.org/licenses/MIT"
        },
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/api",
    "paths": {
        "/auth/login": {
            "post": {
                "description": "Authenticate user and return JWT token",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "User login",
                "parameters": [
                    {
                        "description": "User login credentials",
                        "name": "credentials",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Login successful",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_AuthResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized - invalid credentials",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/auth/register": {
            "post": {
                "description": "Create a new user account with the provided information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Register a new user",
                "parameters": [
                    {
                        "description": "User registration data",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/bookings": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve all bookings belonging to the authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Get my bookings",
                "responses": {
                    "200": {
                        "description": "Bookings retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-array_dto_BookingResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new train ticket booking for authenticated user",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Create a new booking",
                "parameters": [
                    {
                        "description": "Booking data",
                        "name": "booking",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateBookingRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Booking created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_BookingResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/bookings/{id}": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve a specific booking by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Get booking by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_BookingResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/cancel": {
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Cancel an existing booking",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Cancel booking",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking cancelled successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/bookings/{id}/status": {
            "patch": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update the status of a booking (e.g., after payment)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Bookings"
                ],
                "summary": "Update booking status",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Booking ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "New status data",
                        "name": "status",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateBookingStatusRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking status updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/schedules": {
            "get": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Retrieve all train schedules for admin management",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Get all schedules (Admin only)",
                "responses": {
                    "200": {
                        "description": "All schedules retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-array_dto_ScheduleResponse"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new train schedule (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Create a new schedule",
                "parameters": [
                    {
                        "description": "Schedule data",
                        "name": "schedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Schedule created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_ScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/schedules/search": {
            "post": {
                "description": "Search train schedules by origin, destination, date, and passenger count",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Search schedules",
                "parameters": [
                    {
                        "description": "Schedule data",
                        "name": "schedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.SearchScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedules retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-array_dto_ScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/schedules/{id}": {
            "get": {
                "description": "Retrieve a specific train schedule by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Get schedule by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_ScheduleResponse"
                        }
                    },
                    "404": {
                        "description": "Schedule not found",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing train schedule (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Update schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated schedule data",
                        "name": "schedule",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateScheduleRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_ScheduleResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a train schedule (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Delete schedule",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Schedule deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/schedules/{id}/seats": {
            "get": {
                "description": "Retrieve the seat layout for a specific schedule",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Schedules"
                ],
                "summary": "Get seat layout",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Schedule ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Seat layout retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-array_dto_CarriageLayoutDTO"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/stations": {
            "get": {
                "description": "Retrieve a list of all railway stations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stations"
                ],
                "summary": "Get all stations",
                "responses": {
                    "200": {
                        "description": "Stations retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-array_dto_StationResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new railway station (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stations"
                ],
                "summary": "Create a new station",
                "parameters": [
                    {
                        "description": "Station data",
                        "name": "station",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.StationRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Station created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_StationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/stations/{id}": {
            "get": {
                "description": "Retrieve a specific station by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stations"
                ],
                "summary": "Get station by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Station ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Station retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_StationResponse"
                        }
                    },
                    "404": {
                        "description": "Station not found",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing railway station (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stations"
                ],
                "summary": "Update station",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Station ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated station data",
                        "name": "station",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.StationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Station updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_StationResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a railway station (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Stations"
                ],
                "summary": "Delete station",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Station ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Station deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/trains": {
            "get": {
                "description": "Retrieve a list of all trains",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trains"
                ],
                "summary": "Get all trains",
                "responses": {
                    "200": {
                        "description": "Trains retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-array_dto_TrainResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "post": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Create a new train with carriages and seats (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trains"
                ],
                "summary": "Create a new train",
                "parameters": [
                    {
                        "description": "Train data",
                        "name": "train",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.CreateTrainRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Train created successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_TrainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        },
        "/trains/{id}": {
            "get": {
                "description": "Retrieve a specific train by its ID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trains"
                ],
                "summary": "Get train by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Train ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Train retrieved successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_TrainResponse"
                        }
                    },
                    "404": {
                        "description": "Train not found",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "put": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Update an existing train (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trains"
                ],
                "summary": "Update train",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Train ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Updated train data",
                        "name": "train",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/dto.UpdateTrainRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Train updated successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-dto_TrainResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - validation failed",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            },
            "delete": {
                "security": [
                    {
                        "Bearer": []
                    }
                ],
                "description": "Delete a train (Admin only)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Trains"
                ],
                "summary": "Delete train",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Train ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Train deleted successfully",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/dto.Response-any"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "dto.AuthResponse": {
            "type": "object",
            "properties": {
                "token": {
                    "description": "JWT authentication token\nexample: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...",
                    "type": "string"
                }
            }
        },
        "dto.BookerRequest": {
            "type": "object",
            "required": [
                "email",
                "full_name",
                "phone_number"
            ],
            "properties": {
                "email": {
                    "description": "Booker's email address\nrequired: true\nexample: john.doe@example.com",
                    "type": "string"
                },
                "full_name": {
                    "description": "Booker's full name\nrequired: true\nexample: John Doe",
                    "type": "string"
                },
                "phone_number": {
                    "description": "Booker's phone number\nrequired: true\nexample: 081234567890",
                    "type": "string"
                }
            }
        },
        "dto.BookingResponse": {
            "type": "object",
            "properties": {
                "booking_code": {
                    "description": "Unique booking code\nexample: KAI-20240115-001",
                    "type": "string"
                },
                "id": {
                    "description": "Booking unique identifier\nexample: 507f1f77bcf86cd799439015",
                    "type": "string"
                },
                "passengers": {
                    "description": "List of passengers",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.PassengerRequest"
                    }
                },
                "payment_expiry": {
                    "description": "Payment expiry time in YYYY-MM-DD HH:MM format\nexample: 2024-01-15 12:00",
                    "type": "string"
                },
                "schedule": {
                    "description": "Schedule information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ScheduleResponse"
                        }
                    ]
                },
                "status": {
                    "description": "Booking status\nexample: pending",
                    "type": "string"
                },
                "total_price": {
                    "description": "Total price for all passengers\nexample: 300000",
                    "type": "number"
                }
            }
        },
        "dto.CarriageDTO": {
            "type": "object",
            "required": [
                "code",
                "seats"
            ],
            "properties": {
                "code": {
                    "description": "Carriage code (e.g., CAR1, CAR2)\nrequired: true\nexample: CAR1",
                    "type": "string"
                },
                "seats": {
                    "description": "List of seats in this carriage\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SeatDTO"
                    }
                }
            }
        },
        "dto.CarriageLayoutDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Carriage code\nexample: CAR1",
                    "type": "string"
                },
                "seats": {
                    "description": "List of seats with their availability",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.SeatAvailabilityDTO"
                    }
                }
            }
        },
        "dto.CreateBookingRequest": {
            "type": "object",
            "required": [
                "booker",
                "passengers",
                "schedule_id"
            ],
            "properties": {
                "booker": {
                    "description": "Booker information\nrequired: true",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.BookerRequest"
                        }
                    ]
                },
                "passengers": {
                    "description": "List of passengers (minimum 1)\nrequired: true",
                    "type": "array",
                    "minItems": 1,
                    "items": {
                        "$ref": "#/definitions/dto.PassengerRequest"
                    }
                },
                "schedule_id": {
                    "description": "Schedule ID for the booking\nrequired: true\nexample: 507f1f77bcf86cd799439014",
                    "type": "string"
                }
            }
        },
        "dto.CreateScheduleRequest": {
            "type": "object",
            "required": [
                "arrival_time",
                "available_seats",
                "departure_time",
                "destination_station_id",
                "origin_station_id",
                "price",
                "train_id"
            ],
            "properties": {
                "arrival_time": {
                    "description": "Arrival time in YYYY-MM-DD HH:MM format\nrequired: true\nexample: 2024-01-15 16:45",
                    "type": "string"
                },
                "available_seats": {
                    "description": "Number of available seats\nrequired: true\nminimum: 0\nexample: 50",
                    "type": "integer",
                    "minimum": 0
                },
                "departure_time": {
                    "description": "Departure time in YYYY-MM-DD HH:MM format\nrequired: true\nexample: 2024-01-15 08:30",
                    "type": "string"
                },
                "destination_station_id": {
                    "description": "Destination station ID\nrequired: true\nexample: 507f1f77bcf86cd799439012",
                    "type": "string"
                },
                "origin_station_id": {
                    "description": "Origin station ID\nrequired: true\nexample: 507f1f77bcf86cd799439011",
                    "type": "string"
                },
                "price": {
                    "description": "Ticket price\nrequired: true\nminimum: 0\nexample: 150000",
                    "type": "number"
                },
                "train_id": {
                    "description": "Train ID\nrequired: true\nexample: 507f1f77bcf86cd799439013",
                    "type": "string"
                }
            }
        },
        "dto.CreateTrainRequest": {
            "type": "object",
            "required": [
                "carriages",
                "class",
                "name"
            ],
            "properties": {
                "carriages": {
                    "description": "List of carriages with their seats\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CarriageDTO"
                    }
                },
                "class": {
                    "description": "Train class (e.g., Executive, Business, Economy)\nrequired: true\nexample: Executive",
                    "type": "string"
                },
                "name": {
                    "description": "Train name\nrequired: true\nexample: Argo Bromo Anggrek",
                    "type": "string"
                }
            }
        },
        "dto.LoginRequest": {
            "type": "object",
            "required": [
                "email",
                "password"
            ],
            "properties": {
                "email": {
                    "description": "User's email address\nrequired: true\nexample: john.doe@example.com",
                    "type": "string"
                },
                "password": {
                    "description": "User's password\nrequired: true\nexample: password123",
                    "type": "string"
                }
            }
        },
        "dto.PassengerRequest": {
            "type": "object",
            "required": [
                "full_name",
                "identity_number",
                "seat_code"
            ],
            "properties": {
                "full_name": {
                    "description": "Passenger's full name\nrequired: true\nexample: Jane Doe",
                    "type": "string"
                },
                "identity_number": {
                    "description": "Passenger's identity number (exactly 16 characters)\nrequired: true\nexample: 1234567890123456",
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 16
                },
                "seat_code": {
                    "description": "Seat code assigned to the passenger\nrequired: true\nexample: EKO-6 / 9A",
                    "type": "string"
                }
            }
        },
        "dto.RegisterRequest": {
            "type": "object",
            "required": [
                "confirm_password",
                "email",
                "full_name",
                "identity_number",
                "password",
                "phone_number"
            ],
            "properties": {
                "confirm_password": {
                    "description": "Password confirmation (must match password)\nrequired: true\nexample: password123",
                    "type": "string"
                },
                "email": {
                    "description": "User's email address\nrequired: true\nexample: john.doe@example.com",
                    "type": "string"
                },
                "full_name": {
                    "description": "User's full name (minimum 3 characters)\nrequired: true\nexample: John Doe",
                    "type": "string",
                    "minLength": 3
                },
                "identity_number": {
                    "description": "User's identity number (exactly 16 characters)\nrequired: true\nexample: 1234567890123456",
                    "type": "string",
                    "maxLength": 16,
                    "minLength": 16
                },
                "password": {
                    "description": "User's password (minimum 6 characters)\nrequired: true\nexample: password123",
                    "type": "string",
                    "minLength": 6
                },
                "phone_number": {
                    "description": "User's phone number (minimum 10 characters)\nrequired: true\nexample: 081234567890",
                    "type": "string",
                    "minLength": 10
                }
            }
        },
        "dto.Response-any": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data"
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-array_dto_BookingResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.BookingResponse"
                    }
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-array_dto_CarriageLayoutDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CarriageLayoutDTO"
                    }
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-array_dto_ScheduleResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.ScheduleResponse"
                    }
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-array_dto_StationResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.StationResponse"
                    }
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-array_dto_TrainResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.TrainResponse"
                    }
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-dto_AuthResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.AuthResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-dto_BookingResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.BookingResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-dto_ScheduleResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.ScheduleResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-dto_StationResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.StationResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.Response-dto_TrainResponse": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "HTTP status code\nexample: 200",
                    "type": "integer"
                },
                "data": {
                    "description": "Response data",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TrainResponse"
                        }
                    ]
                },
                "message": {
                    "description": "Response message\nexample: Success",
                    "type": "string"
                }
            }
        },
        "dto.ScheduleResponse": {
            "type": "object",
            "properties": {
                "arrival_time": {
                    "description": "Arrival time in YYYY-MM-DD HH:MM format\nexample: 2024-01-15 16:45",
                    "type": "string"
                },
                "available_seats": {
                    "description": "Number of available seats\nexample: 25",
                    "type": "integer"
                },
                "departure_time": {
                    "description": "Departure time in YYYY-MM-DD HH:MM format\nexample: 2024-01-15 08:30",
                    "type": "string"
                },
                "destination_station": {
                    "description": "Destination station information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.StationResponse"
                        }
                    ]
                },
                "duration": {
                    "description": "Journey duration (e.g., \"8h 15m\")\nexample: 8h 15m",
                    "type": "string"
                },
                "id": {
                    "description": "Schedule unique identifier\nexample: 507f1f77bcf86cd799439014",
                    "type": "string"
                },
                "origin_station": {
                    "description": "Origin station information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.StationResponse"
                        }
                    ]
                },
                "price": {
                    "description": "Ticket price\nexample: 150000",
                    "type": "number"
                },
                "train": {
                    "description": "Train information",
                    "allOf": [
                        {
                            "$ref": "#/definitions/dto.TrainInScheduleResponse"
                        }
                    ]
                }
            }
        },
        "dto.SearchScheduleRequest": {
            "type": "object",
            "required": [
                "departure_date",
                "destination_station_id",
                "origin_station_id",
                "passengers"
            ],
            "properties": {
                "departure_date": {
                    "description": "Departure date in YYYY-MM-DD format\nrequired: true\nexample: 2024-01-15",
                    "type": "string"
                },
                "destination_station_id": {
                    "description": "Destination station ID\nrequired: true\nexample: 507f1f77bcf86cd799439012",
                    "type": "string"
                },
                "origin_station_id": {
                    "description": "Origin station ID\nrequired: true\nexample: 507f1f77bcf86cd799439011",
                    "type": "string"
                },
                "passengers": {
                    "description": "Number of passengers\nrequired: true\nminimum: 1\nexample: 2",
                    "type": "integer",
                    "minimum": 1
                }
            }
        },
        "dto.SeatAvailabilityDTO": {
            "type": "object",
            "properties": {
                "code": {
                    "description": "Seat code (e.g., A1, B2)\nexample: A1",
                    "type": "string"
                },
                "is_available": {
                    "description": "Whether the seat is available for booking\nexample: true",
                    "type": "boolean"
                }
            }
        },
        "dto.SeatDTO": {
            "type": "object",
            "required": [
                "code"
            ],
            "properties": {
                "code": {
                    "description": "Seat code (e.g., A1, B2)\nrequired: true\nexample: A1",
                    "type": "string"
                },
                "is_available": {
                    "description": "Whether the seat is available for booking\nexample: true",
                    "type": "boolean"
                }
            }
        },
        "dto.StationRequest": {
            "type": "object",
            "required": [
                "city",
                "code",
                "name"
            ],
            "properties": {
                "city": {
                    "description": "City where the station is located\nrequired: true\nexample: Jakarta",
                    "type": "string"
                },
                "code": {
                    "description": "Station code (2-4 characters)\nrequired: true\nexample: GMB",
                    "type": "string",
                    "maxLength": 4,
                    "minLength": 2
                },
                "name": {
                    "description": "Station name\nrequired: true\nexample: Gambir Station",
                    "type": "string"
                }
            }
        },
        "dto.StationResponse": {
            "type": "object",
            "properties": {
                "city": {
                    "description": "City where the station is located\nexample: Jakarta",
                    "type": "string"
                },
                "code": {
                    "description": "Station code\nexample: GMB",
                    "type": "string"
                },
                "id": {
                    "description": "Station unique identifier\nexample: 507f1f77bcf86cd799439011",
                    "type": "string"
                },
                "name": {
                    "description": "Station name\nexample: Gambir Station",
                    "type": "string"
                }
            }
        },
        "dto.TrainInScheduleResponse": {
            "type": "object",
            "properties": {
                "class": {
                    "description": "Train class\nexample: Executive",
                    "type": "string"
                },
                "name": {
                    "description": "Train name\nexample: Argo Bromo Anggrek",
                    "type": "string"
                }
            }
        },
        "dto.TrainResponse": {
            "type": "object",
            "properties": {
                "carriages": {
                    "description": "List of carriages with their seats",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CarriageDTO"
                    }
                },
                "class": {
                    "description": "Train class\nexample: Executive",
                    "type": "string"
                },
                "id": {
                    "description": "Train unique identifier\nexample: 507f1f77bcf86cd799439011",
                    "type": "string"
                },
                "name": {
                    "description": "Train name\nexample: Argo Bromo Anggrek",
                    "type": "string"
                }
            }
        },
        "dto.UpdateBookingStatusRequest": {
            "type": "object",
            "required": [
                "status"
            ],
            "properties": {
                "status": {
                    "description": "New booking status (e.g., \"confirmed\", \"paid\", \"cancelled\")\nrequired: true\nexample: paid",
                    "type": "string"
                }
            }
        },
        "dto.UpdateScheduleRequest": {
            "type": "object",
            "required": [
                "arrival_time",
                "available_seats",
                "departure_time",
                "price"
            ],
            "properties": {
                "arrival_time": {
                    "description": "Arrival time in YYYY-MM-DD HH:MM format\nrequired: true\nexample: 2024-01-15 16:45",
                    "type": "string"
                },
                "available_seats": {
                    "description": "Number of available seats\nrequired: true\nminimum: 0\nexample: 50",
                    "type": "integer",
                    "minimum": 0
                },
                "departure_time": {
                    "description": "Departure time in YYYY-MM-DD HH:MM format\nrequired: true\nexample: 2024-01-15 08:30",
                    "type": "string"
                },
                "price": {
                    "description": "Ticket price\nrequired: true\nminimum: 0\nexample: 150000",
                    "type": "number"
                }
            }
        },
        "dto.UpdateTrainRequest": {
            "type": "object",
            "required": [
                "carriages",
                "class",
                "name"
            ],
            "properties": {
                "carriages": {
                    "description": "List of carriages with their seats\nrequired: true",
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/dto.CarriageDTO"
                    }
                },
                "class": {
                    "description": "Train class (e.g., Executive, Business, Economy)\nrequired: true\nexample: Executive",
                    "type": "string"
                },
                "name": {
                    "description": "Train name\nrequired: true\nexample: Argo Bromo Anggrek",
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "Bearer": {
            "description": "JWT Authorization header using the Bearer scheme. Example: \"Authorization: Bearer {token}\"",
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}